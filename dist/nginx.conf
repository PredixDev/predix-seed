# Inspired by https://github.com/cloudfoundry-community/nginx-buildpack
worker_processes 1;
daemon off;

env VCAP_SERVICES;
env REDIS;

error_log <%= ENV["APP_ROOT"] %>/openresty/nginx/logs/error.log debug;
events { worker_connections 1024; }

http
{
    log_format cloudfoundry '$http_x_forwarded_for - $http_referer - [$time_local] "$request" $status $body_bytes_sent';
    access_log <%= ENV["APP_ROOT"] %>/openresty/nginx/logs/access.log cloudfoundry;

    # Define the MIME types for files.
    include       mime.types;
    sendfile on;

    include gzip.types;
    etag on;
    tcp_nopush on;
    keepalive_timeout 30;

    default_type  application/octet-stream;

    # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
    # to disable content-type sniffing on some browsers.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    # currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
    # http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
    # 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;


    server
    {
        set     $session_name                       "predix-seed-session";
        set     $session_secret                     U2GoXJPsG4jYx2G3Bn0k99Fle0+yNSqt7D92po40RvU=;
        set     $client_id                          "predix-seed";
        set     $uaa_authorization_header           "Basic cHJlZGl4LXNlZWQ6TTBhVzdrTmZRRndyTTZ3ZHJpV2h3bVc2ck1HQ045Q0x1cnI5VnI3elc0cz0=";
        set     $user_token                         '';


        listen <%= ENV["PORT"] %>;
        server_name localhost;

        #Open File cache
        open_file_cache          max=2000 inactive=20s;
        open_file_cache_valid    60s;
        open_file_cache_min_uses 5;
        open_file_cache_errors   off;

        root <%= ENV["APP_ROOT"] %>/public/www;

        #nginx_status
        location /nginx_status {
            stub_status   on;
            access_log   off;
            allow 127.0.0.1;
            deny all;
        }

        # Don't allow any access to hidden files
        location ~ /\. { deny  all; }

        location ~* \.\w+$ {
            try_files $uri $uri/ 404;
            expires 1d;
        }

        ## Login Routes
        location /login {
            access_by_lua '
            local state = "/about"
            if ngx.req.get_uri_args()["state"] ~= nil then
                state = ngx.req.get_uri_args()["state"]
            end
            local authorization_url = "<%=ENV["UAA_SERVER_URL"]%>/oauth/authorize?response_type=code&client_id="..ngx.var.client_id.."&redirect_uri=https%3A%2F%2F"..ngx.var.host.."%2Fcallback&state="..state
            return ngx.redirect(authorization_url)
            ';
        }

        location /callback {
            rewrite_by_lua_file <%= ENV["APP_ROOT"] %>/get_access_token.lua;
        }

        # Internal access token
        location /_internal/_access_token
        {
            proxy_set_header    Content-Type    application/x-www-form-urlencoded;
            proxy_set_header    Authorization   $uaa_authorization_header;
            proxy_pass          <%= ENV["UAA_SERVER_URL"] %>/oauth/token;
        }

        location /logout
        {
            access_by_lua '
                local common = require("common");
                common.remove_session()
                local logout_server_url = "<%= ENV["UAA_SERVER_URL"] %>/logout?redirect=https://"..ngx.var.host
                return ngx.redirect(logout_server_url)
            ';
        }

        ## User Routes
        location /userinfo
        {
            add_header Cache-Control "private";
            expires off;

            default_type 'application/json';
            content_by_lua '
                local common = require("common");
                ngx.say(common.get_current_user_info())
            ';
        }

        # Internal url to get user information
        location /_internal/_userinfo
        {
            proxy_set_header    Content-Type    application/x-www-form-urlencoded;
            proxy_set_header    Authorization   $uaa_authorization_header;
            proxy_pass          <%= ENV["UAA_SERVER_URL"] %>/check_token;
        }

        # Any Api Call made should have bearer token set using set_access_token.lua file
        location /api{
            access_by_lua_file <%= ENV["APP_ROOT"] %>/set_access_token.lua;

            # Refer https://github.com/PredixDev/predix-seed/wiki/Reading-VCAP_SERVICES-in-client-side-or-nginx-for-proxying for details
            location /api/view-service
            {
              proxy_set_header    Authorization   $user_token;
              proxy_set_header    predix-zone-id   "<%= ENV["vcap_service_predix_seed_view_service_instanceId"] %>";
              rewrite             /api/view-service/(.*) /api/$1 break;
              proxy_pass  "<%= ENV["vcap_service_predix_seed_view_service_uri"] %>";
            }
        }


        location / {
            # For HTML5 Support, Serve index.html for any other endpoint
            index index.html index.htm Default.htm;
            try_files $uri $uri/ /index.html;

            <% if File.exists?(File.join(ENV["APP_ROOT"], "nginx/conf/.enable_directory_index")) %>
            autoindex on;
            <% end %>


            # <% if File.exists?(File.join(ENV["APP_ROOT"], "nginx/conf/.enable_directory_index")) %>
            # 	autoindex on;
            # <% end %>
        }


    }
}
